/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { VotingDapp, VotingDappInterface } from "../VotingDapp";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "Candidates",
    outputs: [
      {
        internalType: "string",
        name: "candidateName",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "candidateAge",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "totalVotes",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_age",
        type: "uint256",
      },
    ],
    name: "becomeCandidate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "currentStatus",
    outputs: [
      {
        internalType: "string",
        name: "_candidateName",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_totalVotes",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "endElection",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getResult",
    outputs: [
      {
        internalType: "string",
        name: "_candidateName",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_totalVotes",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "startElection",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_index",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526000805560006001556000600260006101000a81548160ff02191690831515021790555034801561003457600080fd5b50610bae806100446000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806359f784681161005b57806359f78468146100ec5780635b247d27146100f657806362d73eb814610127578063de292789146101315761007d565b80630121b93f146100825780630682d4e31461009e578063290e9212146100ba575b600080fd5b61009c60048036038101906100979190610812565b610150565b005b6100b860048036038101906100b391906108a4565b6101ce565b005b6100d460048036038101906100cf9190610812565b610291565b6040516100e3939291906109ac565b60405180910390f35b6100f4610353565b005b610110600480360381019061010b9190610812565b610422565b60405161011e9291906109ea565b60405180910390f35b61012f6104ea565b005b610139610548565b6040516101479291906109ea565b60405180910390f35b60011515600260009054906101000a900460ff1615151461017057600080fd5b60016004828154811061018657610185610a1a565b5b9060005260206000209060030201600201546101a29190610a78565b600482815481106101b6576101b5610a1a565b5b90600052602060002090600302016002018190555050565b6004604051806060016040528085858080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508152602001838152602001600081525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000019080519060200190610275929190610694565b5060208201518160010155604082015181600201555050505050565b600481815481106102a157600080fd5b90600052602060002090600302016000915090508060000180546102c490610afd565b80601f01602080910402602001604051908101604052809291908181526020018280546102f090610afd565b801561033d5780601f106103125761010080835404028352916020019161033d565b820191906000526020600020905b81548152906001019060200180831161032057829003601f168201915b5050505050908060010154908060020154905083565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103ad57600080fd5b6000600260006101000a81548160ff0219169083151502179055506000600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060018190555060046000610420919061071a565b565b60606000806004848154811061043b5761043a610a1a565b5b9060005260206000209060030201905080600001816002015481805461046090610afd565b80601f016020809104026020016040519081016040528092919081815260200182805461048c90610afd565b80156104d95780601f106104ae576101008083540402835291602001916104d9565b820191906000526020600020905b8154815290600101906020018083116104bc57829003601f168201915b505050505091509250925050915091565b6001600260006101000a81548160ff02191690831515021790555033600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b606060008060009050600080600092505b60015483116105cd57816004848154811061057757610576610a1a565b5b906000526020600020906003020160020154106105ba57600483815481106105a2576105a1610a1a565b5b90600052602060002090600302016002015491508290505b82806105c590610b2f565b935050610559565b6000600482815481106105e3576105e2610a1a565b5b9060005260206000209060030201905080600001816002015481805461060890610afd565b80601f016020809104026020016040519081016040528092919081815260200182805461063490610afd565b80156106815780601f1061065657610100808354040283529160200191610681565b820191906000526020600020905b81548152906001019060200180831161066457829003601f168201915b5050505050915095509550505050509091565b8280546106a090610afd565b90600052602060002090601f0160209004810192826106c25760008555610709565b82601f106106db57805160ff1916838001178555610709565b82800160010185558215610709579182015b828111156107085782518255916020019190600101906106ed565b5b509050610716919061073e565b5090565b508054600082556003029060005260206000209081019061073b919061075b565b50565b5b8082111561075757600081600090555060010161073f565b5090565b5b8082111561078e57600080820160006107759190610792565b600182016000905560028201600090555060030161075c565b5090565b50805461079e90610afd565b6000825580601f106107b057506107cf565b601f0160209004906000526020600020908101906107ce919061073e565b5b50565b600080fd5b600080fd5b6000819050919050565b6107ef816107dc565b81146107fa57600080fd5b50565b60008135905061080c816107e6565b92915050565b600060208284031215610828576108276107d2565b5b6000610836848285016107fd565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126108645761086361083f565b5b8235905067ffffffffffffffff81111561088157610880610844565b5b60208301915083600182028301111561089d5761089c610849565b5b9250929050565b6000806000604084860312156108bd576108bc6107d2565b5b600084013567ffffffffffffffff8111156108db576108da6107d7565b5b6108e78682870161084e565b935093505060206108fa868287016107fd565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101561093e578082015181840152602081019050610923565b8381111561094d576000848401525b50505050565b6000601f19601f8301169050919050565b600061096f82610904565b610979818561090f565b9350610989818560208601610920565b61099281610953565b840191505092915050565b6109a6816107dc565b82525050565b600060608201905081810360008301526109c68186610964565b90506109d5602083018561099d565b6109e2604083018461099d565b949350505050565b60006040820190508181036000830152610a048185610964565b9050610a13602083018461099d565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a83826107dc565b9150610a8e836107dc565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ac357610ac2610a49565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b1557607f821691505b60208210811415610b2957610b28610ace565b5b50919050565b6000610b3a826107dc565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610b6d57610b6c610a49565b5b60018201905091905056fea2646970667358221220b629c01fc55790ab9889cc32371038ee8195d778700133e1f600ed83cf1adef364736f6c634300080a0033";

type VotingDappConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: VotingDappConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class VotingDapp__factory extends ContractFactory {
  constructor(...args: VotingDappConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<VotingDapp> {
    return super.deploy(overrides || {}) as Promise<VotingDapp>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): VotingDapp {
    return super.attach(address) as VotingDapp;
  }
  connect(signer: Signer): VotingDapp__factory {
    return super.connect(signer) as VotingDapp__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): VotingDappInterface {
    return new utils.Interface(_abi) as VotingDappInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): VotingDapp {
    return new Contract(address, _abi, signerOrProvider) as VotingDapp;
  }
}
